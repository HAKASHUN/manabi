<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gulp on HAKASHUN manabi</title>
    <link>http://hakashun.github.io/manabi/tags/gulp/</link>
    <description>Recent content in Gulp on HAKASHUN manabi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 13 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://hakashun.github.io/manabi/tags/gulp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>オリジナルのアイコンフォントを作成する</title>
      <link>http://hakashun.github.io/manabi/posts/2015/iconfont/</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://hakashun.github.io/manabi/posts/2015/iconfont/</guid>
      <description>

&lt;h1 id=&#34;オリジナルのアイコンフォントを作成する:6f969ac5af23040a02ec272896a60ebf&#34;&gt;オリジナルのアイコンフォントを作成する&lt;/h1&gt;

&lt;h2 id=&#34;やりたいこと:6f969ac5af23040a02ec272896a60ebf&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;自分で作ったアイコンを一つのフォント化する。&lt;/li&gt;
&lt;li&gt;以降、アイコンを追加したい際は、ファイルを追加してビルドすればOK&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;使ったもの:6f969ac5af23040a02ec272896a60ebf&#34;&gt;使ったもの&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;gulp&lt;/li&gt;
&lt;li&gt;gulp-iconfont&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本当はgulpにも依存したくないけど&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;自分のsvg作成時のルール:6f969ac5af23040a02ec272896a60ebf&#34;&gt;自分のSVG作成時のルール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nfroidure/gulp-iconfont#preparing-svgs&#34;&gt;gulp-iconfontのレポジトリ&lt;/a&gt;に詳しく乗っているので、よく読む。&lt;/p&gt;

&lt;h3 id=&#34;ツール:6f969ac5af23040a02ec272896a60ebf&#34;&gt;ツール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sketch3を使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nfroidure/gulp-iconfont#sketch&#34;&gt;Sketch3で作成する際のテンプレート&lt;/a&gt;があるので活用する

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symbol-font-14px.sketch&lt;/code&gt;をベースにしました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;サイズ:6f969ac5af23040a02ec272896a60ebf&#34;&gt;サイズ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;500px&lt;/code&gt;以上の高さで作ること&lt;/li&gt;
&lt;li&gt;基本的に幅と高さ&lt;code&gt;560px&lt;/code&gt;のSVGファイルを作成する

&lt;ul&gt;
&lt;li&gt;テンプレートのサイズ感をそのまま継承&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アイコン本体は&lt;code&gt;480px&lt;/code&gt;の正方形に収まるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;カラー:6f969ac5af23040a02ec272896a60ebf&#34;&gt;カラー&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;黒色(&lt;code&gt;#000000&lt;/code&gt;)のベタ塗り&lt;/li&gt;
&lt;/ul&gt;

&lt;figure &gt;

  &lt;img src=&#34;http://hakashun.github.io/manabi/manabi/img/posts/2015/iconfont/sample.png&#34; alt=&#34;試しにSketch3で作ってみた感じ&#34; width=&#34;1000&#34;  /&gt;
  

&lt;figcaption&gt;
  &lt;p&gt;
    試しにSketch3で作ってみた感じ
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;作成したsvgからフォントファイルを作成:6f969ac5af23040a02ec272896a60ebf&#34;&gt;作成したsvgからフォントファイルを作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;root
├── src
│   └── icons
│       └── wider.svg // 作成したsvgファイル
└── fonts //作成したフォントを入れたいディレクトリ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようなディレクトリ構成にしたので、&lt;code&gt;src/icons/*.svg&lt;/code&gt;ファイルが、&lt;code&gt;src/fonts&lt;/code&gt;ディレクトリにフォントとして出力されるようにします。&lt;/p&gt;

&lt;h3 id=&#34;gulpタスク:6f969ac5af23040a02ec272896a60ebf&#34;&gt;gulpタスク&lt;/h3&gt;

&lt;p&gt;設定したgulpタスクは、こんな感じになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require(&amp;quot;gulp&amp;quot;);
var iconfont = require(&#39;gulp-iconfont&#39;);

gulp.task(&#39;iconfont&#39;, function(){
  return gulp.src([&#39;src/icons/*.svg&#39;])
    .pipe(iconfont({
      fontName: &#39;myfont&#39;,
      appendUnicode: true,
      formats: [&#39;ttf&#39;, &#39;eot&#39;, &#39;woff&#39;]
    }))
    .pipe(gulp.dest(&#39;fonts/&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gulp iconfont

[14:56:08] Starting &#39;iconfont&#39;...
[14:56:08] gulp-svgicons2svgfont: Font created
[14:56:08] Finished &#39;iconfont&#39; after 114 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように、3種類の拡張子でフォントファイルが作成されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root/fonts
├── myfont.eot
├── myfont.ttf
└── myfont.woff
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ガイドファイルも作成する:6f969ac5af23040a02ec272896a60ebf&#34;&gt;ガイドファイルも作成する&lt;/h2&gt;

&lt;h3 id=&#34;割り当てられたunicodeがわからない:6f969ac5af23040a02ec272896a60ebf&#34;&gt;割り当てられたUnicodeがわからない&lt;/h3&gt;

&lt;p&gt;フォントも無事に生成されて、無事に使おうと思ったところで問題が発生しました。
作ったアイコンフォントを出すためのUnicodeがわからなかったのです。。。&lt;/p&gt;

&lt;p&gt;そこで、フォントファイルの作成と同時に、フォントの中身や使い方を説明するガイドファイルを作る仕組みを入れることにしました。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートファイルの用意:6f969ac5af23040a02ec272896a60ebf&#34;&gt;テンプレートファイルの用意&lt;/h3&gt;

&lt;p&gt;Sketch3のテンプレートを提供していた&lt;a href=&#34;https://github.com/cognitom/symbols-for-sketch&#34;&gt;symbols-for-sketch&lt;/a&gt;のレポジトリで、ガイドファイルを作成する仕組みがあるので、それを参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cognitom/symbols-for-sketch/blob/master/templates/fontawesome-style.html&#34;&gt;htmlのテンプレート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cognitom/symbols-for-sketch/blob/master/templates/fontawesome-style.css&#34;&gt;cssのテンプレート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※テンプレートエンジンは&lt;a href=&#34;https://github.com/tj/consolidate.js&#34;&gt;consolidate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;仕組みとしては、gulpでフォントファイルを生成する過程で、必要なパラメータをテンプレートに流し込む感じです。
&lt;code&gt;gulp-iconfont&lt;/code&gt;が必要な情報を&lt;code&gt;glyphs&lt;/code&gt;というイベント名でemitしてくれるので、gulpfileは以下の様になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.on(&#39;glyphs&#39;, function(glyphs) {
  // テンプレートに渡すパラメータを調整
  var options = {
    glyphs: glyphs.map(function(glyph) {
      return { 
        name: glyph.name, 
        codepoint: 
        glyph.unicode[0].charCodeAt(0) 
      }
    }),
    fontName: fontName,
    fontPath: &#39;../../fonts/&#39;,
    className: &#39;s&#39;
  };
  
  // ガイドCSSの作成
  gulp.src(&#39;src/templates/fontawesome-style.css&#39;)
    .pipe(consolidate(&#39;lodash&#39;, options))
    .pipe(rename({ basename:fontName }))
    .pipe(gulp.dest(&#39;dist/css/&#39;));

  // ガイドHTMLの作成
  gulp.src(&#39;src/templates/fontawesome-style.html&#39;)
    .pipe(consolidate(&#39;lodash&#39;, options))
    .pipe(rename({ basename:&#39;sample&#39; }))
    .pipe(gulp.dest(&#39;dist/&#39;));
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、アイコンフォント作成時に、以下のようなガイドファイルが作成されます。
CSSの中身をみれば、作成したアイコンフォントをどのように定義すればよいかわかります。&lt;/p&gt;

&lt;figure &gt;

  &lt;img src=&#34;http://hakashun.github.io/manabi/manabi/img/posts/2015/iconfont/preview.png&#34; alt=&#34;できたガイドファイルを開いてみた&#34; width=&#34;600&#34;  /&gt;
  

&lt;figcaption&gt;
  &lt;p&gt;
    できたガイドファイルを開いてみた
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;作成されたガイドCSSをビルド時にアプリケーションのCSSに動的に組み込むこともできるので、かなりメンテナンス性のある形で自作のアイコンフォントを運用できると思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;最終的なgulpタスク:6f969ac5af23040a02ec272896a60ebf&#34;&gt;最終的なgulpタスク&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var gulp = require(&amp;quot;gulp&amp;quot;);
var iconfont = require(&#39;gulp-iconfont&#39;);
var consolidate = require(&#39;gulp-consolidate&#39;);
var rename = require(&amp;quot;gulp-rename&amp;quot;);

var fontName = &#39;myfont&#39;;

gulp.task(&#39;iconfont&#39;, function(){
  return gulp.src([&#39;src/icons/*.svg&#39;])
    .pipe(iconfont({
      fontName: fontName,
      appendUnicode: true,
      formats: [&#39;ttf&#39;, &#39;eot&#39;, &#39;woff&#39;]
    }))
    .on(&#39;glyphs&#39;, function(glyphs) {
      var options = {
        glyphs: glyphs.map(function(glyph) {
          // this line is needed because gulp-iconfont has changed the api from 2.0
          return { name: glyph.name, codepoint: glyph.unicode[0].charCodeAt(0) }
        }),
        fontName: fontName,
        fontPath: &#39;../../fonts/&#39;, // set path to font (from your CSS file if relative)
        className: &#39;s&#39; // set class name in your CSS
      };
      gulp.src(&#39;src/templates/fontawesome-style.css&#39;)
        .pipe(consolidate(&#39;lodash&#39;, options))
        .pipe(rename({ basename:fontName }))
        .pipe(gulp.dest(&#39;dist/css/&#39;)); // set path to export your CSS

      // if you don&#39;t need sample.html, remove next 4 lines
      gulp.src(&#39;src/templates/fontawesome-style.html&#39;)
        .pipe(consolidate(&#39;lodash&#39;, options))
        .pipe(rename({ basename:&#39;sample&#39; }))
        .pipe(gulp.dest(&#39;dist/&#39;)); // set path to export your sample HTML
    })
    .pipe(gulp.dest(&#39;fonts/&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考文献:6f969ac5af23040a02ec272896a60ebf&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cognitom/symbols-for-sketch&#34;&gt;symbols-for-sketch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atsu666.com/entry-78.html&#34;&gt;gulpでWebFont作成を自動化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thrbrd.hateblo.jp/entry/2015/02/14/012508&#34;&gt;gulpを使ってsvgからアイコンフォント (WEBフォント) を自作する最短の方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://memo.goodpatch.co/2015/01/make-icon-font/&#34;&gt;sprite画像はもう終わり？gulpでIcon Fontをつくろう！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akabeko.me/blog/2015/01/gulp-iconfont/&#34;&gt;gulp でアイコン フォント生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://liginc.co.jp/web/design/font/33237&#34;&gt;無料でできる！オリジナルアイコンフォントを作ってみよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://10251.net/original-icon-font&#34;&gt;アイコンフォント（Webフォント）自作のメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>